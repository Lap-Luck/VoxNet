// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.opengl.GLSurfaceView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AddDelBinding addDel;

  @NonNull
  public final ImageButton clearFilters;

  @NonNull
  public final ColorBinding colorPallet;

  @NonNull
  public final FileListBinding fileList;

  @NonNull
  public final GLSurfaceView glSurfaceView;

  @NonNull
  public final LoginBinding loginscreen;

  @NonNull
  public final PositionBinding navigation;

  @NonNull
  public final ImageButton options;

  @NonNull
  public final RegisterBinding registerscreen;

  @NonNull
  public final SaveBinding saving;

  @NonNull
  public final ImageButton server;

  @NonNull
  public final ServerConnectToBinding serverConnectTo;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final TextView serverInfo;

  @NonNull
  public final ImageButton setings;

  @NonNull
  public final ImageButton showAdd;

  @NonNull
  public final ImageButton showColor;

  @NonNull
  public final ImageButton showNav;

  @NonNull
  public final ImageButton showSave;

  @NonNull
  public final ImageButton showZoom;

  @NonNull
  public final TableLayout tableLayout;

  @NonNull
  public final TableLayout tableLayout2;

  @NonNull
  public final MainPart1Binding tools;

  @NonNull
  public final ZoomBinding zoom;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull AddDelBinding addDel,
      @NonNull ImageButton clearFilters, @NonNull ColorBinding colorPallet,
      @NonNull FileListBinding fileList, @NonNull GLSurfaceView glSurfaceView,
      @NonNull LoginBinding loginscreen, @NonNull PositionBinding navigation,
      @NonNull ImageButton options, @NonNull RegisterBinding registerscreen,
      @NonNull SaveBinding saving, @NonNull ImageButton server,
      @NonNull ServerConnectToBinding serverConnectTo, @Nullable TextView serverInfo,
      @NonNull ImageButton setings, @NonNull ImageButton showAdd, @NonNull ImageButton showColor,
      @NonNull ImageButton showNav, @NonNull ImageButton showSave, @NonNull ImageButton showZoom,
      @NonNull TableLayout tableLayout, @NonNull TableLayout tableLayout2,
      @NonNull MainPart1Binding tools, @NonNull ZoomBinding zoom) {
    this.rootView = rootView;
    this.addDel = addDel;
    this.clearFilters = clearFilters;
    this.colorPallet = colorPallet;
    this.fileList = fileList;
    this.glSurfaceView = glSurfaceView;
    this.loginscreen = loginscreen;
    this.navigation = navigation;
    this.options = options;
    this.registerscreen = registerscreen;
    this.saving = saving;
    this.server = server;
    this.serverConnectTo = serverConnectTo;
    this.serverInfo = serverInfo;
    this.setings = setings;
    this.showAdd = showAdd;
    this.showColor = showColor;
    this.showNav = showNav;
    this.showSave = showSave;
    this.showZoom = showZoom;
    this.tableLayout = tableLayout;
    this.tableLayout2 = tableLayout2;
    this.tools = tools;
    this.zoom = zoom;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_del;
      View addDel = ViewBindings.findChildViewById(rootView, id);
      if (addDel == null) {
        break missingId;
      }
      AddDelBinding binding_addDel = AddDelBinding.bind(addDel);

      id = R.id.clear_filters;
      ImageButton clearFilters = ViewBindings.findChildViewById(rootView, id);
      if (clearFilters == null) {
        break missingId;
      }

      id = R.id.color_pallet;
      View colorPallet = ViewBindings.findChildViewById(rootView, id);
      if (colorPallet == null) {
        break missingId;
      }
      ColorBinding binding_colorPallet = ColorBinding.bind(colorPallet);

      id = R.id.fileList;
      View fileList = ViewBindings.findChildViewById(rootView, id);
      if (fileList == null) {
        break missingId;
      }
      FileListBinding binding_fileList = FileListBinding.bind(fileList);

      id = R.id.glSurfaceView;
      GLSurfaceView glSurfaceView = ViewBindings.findChildViewById(rootView, id);
      if (glSurfaceView == null) {
        break missingId;
      }

      id = R.id.loginscreen;
      View loginscreen = ViewBindings.findChildViewById(rootView, id);
      if (loginscreen == null) {
        break missingId;
      }
      LoginBinding binding_loginscreen = LoginBinding.bind(loginscreen);

      id = R.id.navigation;
      View navigation = ViewBindings.findChildViewById(rootView, id);
      if (navigation == null) {
        break missingId;
      }
      PositionBinding binding_navigation = PositionBinding.bind(navigation);

      id = R.id.options;
      ImageButton options = ViewBindings.findChildViewById(rootView, id);
      if (options == null) {
        break missingId;
      }

      id = R.id.registerscreen;
      View registerscreen = ViewBindings.findChildViewById(rootView, id);
      if (registerscreen == null) {
        break missingId;
      }
      RegisterBinding binding_registerscreen = RegisterBinding.bind(registerscreen);

      id = R.id.saving;
      View saving = ViewBindings.findChildViewById(rootView, id);
      if (saving == null) {
        break missingId;
      }
      SaveBinding binding_saving = SaveBinding.bind(saving);

      id = R.id.server;
      ImageButton server = ViewBindings.findChildViewById(rootView, id);
      if (server == null) {
        break missingId;
      }

      id = R.id.server_connect_to;
      View serverConnectTo = ViewBindings.findChildViewById(rootView, id);
      if (serverConnectTo == null) {
        break missingId;
      }
      ServerConnectToBinding binding_serverConnectTo = ServerConnectToBinding.bind(serverConnectTo);

      id = R.id.server_info;
      TextView serverInfo = ViewBindings.findChildViewById(rootView, id);

      id = R.id.setings;
      ImageButton setings = ViewBindings.findChildViewById(rootView, id);
      if (setings == null) {
        break missingId;
      }

      id = R.id.show_add;
      ImageButton showAdd = ViewBindings.findChildViewById(rootView, id);
      if (showAdd == null) {
        break missingId;
      }

      id = R.id.show_color;
      ImageButton showColor = ViewBindings.findChildViewById(rootView, id);
      if (showColor == null) {
        break missingId;
      }

      id = R.id.show_nav;
      ImageButton showNav = ViewBindings.findChildViewById(rootView, id);
      if (showNav == null) {
        break missingId;
      }

      id = R.id.show_save;
      ImageButton showSave = ViewBindings.findChildViewById(rootView, id);
      if (showSave == null) {
        break missingId;
      }

      id = R.id.show_zoom;
      ImageButton showZoom = ViewBindings.findChildViewById(rootView, id);
      if (showZoom == null) {
        break missingId;
      }

      id = R.id.tableLayout;
      TableLayout tableLayout = ViewBindings.findChildViewById(rootView, id);
      if (tableLayout == null) {
        break missingId;
      }

      id = R.id.tableLayout2;
      TableLayout tableLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (tableLayout2 == null) {
        break missingId;
      }

      id = R.id.tools;
      View tools = ViewBindings.findChildViewById(rootView, id);
      if (tools == null) {
        break missingId;
      }
      MainPart1Binding binding_tools = MainPart1Binding.bind(tools);

      id = R.id.zoom;
      View zoom = ViewBindings.findChildViewById(rootView, id);
      if (zoom == null) {
        break missingId;
      }
      ZoomBinding binding_zoom = ZoomBinding.bind(zoom);

      return new ActivityMainBinding((ConstraintLayout) rootView, binding_addDel, clearFilters,
          binding_colorPallet, binding_fileList, glSurfaceView, binding_loginscreen,
          binding_navigation, options, binding_registerscreen, binding_saving, server,
          binding_serverConnectTo, serverInfo, setings, showAdd, showColor, showNav, showSave,
          showZoom, tableLayout, tableLayout2, binding_tools, binding_zoom);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
