// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LoginBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button buttonLogin;

  @NonNull
  public final EditText editTextLogin;

  @NonNull
  public final EditText editTextPass;

  @NonNull
  public final Button guest;

  @NonNull
  public final Button registerAccount;

  private LoginBinding(@NonNull ConstraintLayout rootView, @NonNull Button buttonLogin,
      @NonNull EditText editTextLogin, @NonNull EditText editTextPass, @NonNull Button guest,
      @NonNull Button registerAccount) {
    this.rootView = rootView;
    this.buttonLogin = buttonLogin;
    this.editTextLogin = editTextLogin;
    this.editTextPass = editTextPass;
    this.guest = guest;
    this.registerAccount = registerAccount;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LoginBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LoginBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.login, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LoginBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_login;
      Button buttonLogin = ViewBindings.findChildViewById(rootView, id);
      if (buttonLogin == null) {
        break missingId;
      }

      id = R.id.editText_login;
      EditText editTextLogin = ViewBindings.findChildViewById(rootView, id);
      if (editTextLogin == null) {
        break missingId;
      }

      id = R.id.editText_pass;
      EditText editTextPass = ViewBindings.findChildViewById(rootView, id);
      if (editTextPass == null) {
        break missingId;
      }

      id = R.id.guest;
      Button guest = ViewBindings.findChildViewById(rootView, id);
      if (guest == null) {
        break missingId;
      }

      id = R.id.register_account;
      Button registerAccount = ViewBindings.findChildViewById(rootView, id);
      if (registerAccount == null) {
        break missingId;
      }

      return new LoginBinding((ConstraintLayout) rootView, buttonLogin, editTextLogin, editTextPass,
          guest, registerAccount);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
