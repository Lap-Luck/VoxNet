// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ServerConnectToBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button serverConnect;

  @NonNull
  public final Button serverDisconnect;

  @NonNull
  public final Button showFiles;

  @NonNull
  public final Button showLogin;

  @NonNull
  public final Button showRegister;

  private ServerConnectToBinding(@NonNull ConstraintLayout rootView, @NonNull Button serverConnect,
      @NonNull Button serverDisconnect, @NonNull Button showFiles, @NonNull Button showLogin,
      @NonNull Button showRegister) {
    this.rootView = rootView;
    this.serverConnect = serverConnect;
    this.serverDisconnect = serverDisconnect;
    this.showFiles = showFiles;
    this.showLogin = showLogin;
    this.showRegister = showRegister;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ServerConnectToBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ServerConnectToBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.server_connect_to, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ServerConnectToBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.server_connect;
      Button serverConnect = ViewBindings.findChildViewById(rootView, id);
      if (serverConnect == null) {
        break missingId;
      }

      id = R.id.server_disconnect;
      Button serverDisconnect = ViewBindings.findChildViewById(rootView, id);
      if (serverDisconnect == null) {
        break missingId;
      }

      id = R.id.show_files;
      Button showFiles = ViewBindings.findChildViewById(rootView, id);
      if (showFiles == null) {
        break missingId;
      }

      id = R.id.show_login;
      Button showLogin = ViewBindings.findChildViewById(rootView, id);
      if (showLogin == null) {
        break missingId;
      }

      id = R.id.show_register;
      Button showRegister = ViewBindings.findChildViewById(rootView, id);
      if (showRegister == null) {
        break missingId;
      }

      return new ServerConnectToBinding((ConstraintLayout) rootView, serverConnect,
          serverDisconnect, showFiles, showLogin, showRegister);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
