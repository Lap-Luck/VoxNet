// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FileListBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button addFile;

  @NonNull
  public final Button asfafs;

  @NonNull
  public final Button exitList;

  @NonNull
  public final LinearLayout fileList;

  @NonNull
  public final EditText fileName;

  @NonNull
  public final Button makePublic;

  private FileListBinding(@NonNull ConstraintLayout rootView, @NonNull Button addFile,
      @NonNull Button asfafs, @NonNull Button exitList, @NonNull LinearLayout fileList,
      @NonNull EditText fileName, @NonNull Button makePublic) {
    this.rootView = rootView;
    this.addFile = addFile;
    this.asfafs = asfafs;
    this.exitList = exitList;
    this.fileList = fileList;
    this.fileName = fileName;
    this.makePublic = makePublic;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FileListBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FileListBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.file_list, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FileListBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_file;
      Button addFile = ViewBindings.findChildViewById(rootView, id);
      if (addFile == null) {
        break missingId;
      }

      id = R.id.asfafs;
      Button asfafs = ViewBindings.findChildViewById(rootView, id);
      if (asfafs == null) {
        break missingId;
      }

      id = R.id.exit_list;
      Button exitList = ViewBindings.findChildViewById(rootView, id);
      if (exitList == null) {
        break missingId;
      }

      id = R.id.file_list;
      LinearLayout fileList = ViewBindings.findChildViewById(rootView, id);
      if (fileList == null) {
        break missingId;
      }

      id = R.id.file_name;
      EditText fileName = ViewBindings.findChildViewById(rootView, id);
      if (fileName == null) {
        break missingId;
      }

      id = R.id.make_public;
      Button makePublic = ViewBindings.findChildViewById(rootView, id);
      if (makePublic == null) {
        break missingId;
      }

      return new FileListBinding((ConstraintLayout) rootView, addFile, asfafs, exitList, fileList,
          fileName, makePublic);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
